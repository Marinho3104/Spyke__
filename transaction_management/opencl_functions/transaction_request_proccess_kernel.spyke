

// Locks until the signal is given that a new Transaction Request is ready for proccess
// @param __have_work
// @param __bit_index
void wait_for_signal( global int* __have_work, size_t __bit_index ) {

    // Variable to hold the current value of the __have_work variable
    int _have_work_check;

    // Locks until the bit is 1
    do { _have_work_check = atomic_and( __have_work, 1 << 0 ); } while( ! _have_work_check );

}

// Entry point to the Transaction Request Proccess kernel functions
// @param __global_offset Because this kernel can be executed from different devices this is the offset used in order to obtain always a id for each thread even in different device ids
// @param __have_work Variable to sinalize to each thread that have new work to proccess
kernel void transaction_request_proccess_kernel(
    unsigned long __global_offset,
    global int* __have_work
) {

    // Infity loop to always proccess new transactions
    while( 1 ) {

        // Waits for the signal to new proccess 
        wait_for_signal( 
            __have_work + ( get_global_id( 0 ) / sizeof( *__have_work ) ), 
            get_local_id( 0 ) 
        );

        printf( "Hey" );

        break;

    }

}