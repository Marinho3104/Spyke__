

// Proccesses a transaction request data
// @return True if the transaction is valid or false if not
bool proccess_transaction_request( void* __transaction_request_data ) {

    return 1;

}

// Locks until the signal is given that a new Transaction Request is ready for proccess
// @param __have_work
// @param __bit_index
void wait_for_signal( global int* __have_work, size_t __bit_index ) {

    // Variable to hold the current value of the __have_work variable
    int _have_work_check;

    // Locks until the bit is 1
    do { _have_work_check = atomic_and( __have_work, 1 << 0 ); } while( ! _have_work_check );

}

// Saves the transaction data into the pool
// @param __transaction_data
// @param __pool
// @param __pool_size
void store_transaction_data( 
    void* __transaction_data, 
    global void* __pool, 
    unsigned long __pool_transactions_count 
) {

    // Loops throuht the pool size
    for ( unsigned long _ = 0; _ < __pool_transactions_count; _++ ) {



    }

}

// Entry point to the Transaction Request Proccess kernel functions
// @param __global_offset Because this kernel can be executed from different devices this is the offset used in order to obtain always a id for each thread even in different device ids
// @param __have_work Variable to sinalize to each thread that have new work to proccess
kernel void transaction_request_proccess_kernel(
    unsigned long __global_offset,
    global int* __have_work,
    global unsigned long* __work_data,
    global void* __pool,
    unsigned long __pool_transactions_count
) {

    // Unique  identification
    unsigned long _unique_id = get_global_id( 0 ) + __global_offset;

    // Transaction request data for this specific thread
    void* _transaction_request_data = 
        ( void* ) *( __work_data + _unique_id );

    // Infity loop to always proccess new transactions
    while( 1 ) {

        // Waits for the signal to new proccess 
        wait_for_signal( 
            __have_work, //  + ( get_global_id( 0 ) / ( sizeof( *__have_work ) * 8 ) ), 
            get_local_id( 0 ) 
        );

        // Proccesses the Transaction Request Data
        if ( proccess_transaction_request( _transaction_request_data ) ) {

            // If transaction is valid adds it into the pool
            store_transaction_data( _transaction_request_data, __pool, __pool_transactions_count );

        }

        break;

    }

}